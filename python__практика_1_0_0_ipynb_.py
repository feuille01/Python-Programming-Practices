# -*- coding: utf-8 -*-
"""Python  "Практика 1.0.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10sy7m_X2Gr0J-NcdfRlwpZLQXGvZVdUZ

ФИО: Цепелев Кирилл Сергеевич

# Задание (совместное с преподавателем)

Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.
Для этого создайте класс Employee со следующими методами:

- Метод consume_vacation должен отвечать за списание дней отпуска.

Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).

При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.

Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.

- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```


Чтобы проверить работу программы:
1. Создайте экземпляр класса Employee.
2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.
3. Вызовите метод get_vacation_details.
"""

#Создание класса
class Employee:
    vacation_days = 28

    def __init__(self, first_name, second_name, gender): # конструктор класса
        self.first_name = first_name
        self.second_name = second_name
        self.gender = gender
        self.remaning_vacation_days = self.vacation_days

    def consume_vacation(self, days): # метод для вычитания прошедших отпускных дней
        self.remaning_vacation_days -= days

    def get_vacation_details(self):
        return f'Остаток отпускных дней: {self.remaning_vacation_days}.'

employee1 = Employee('Иван', 'Иванович', 'м')
employee2 = Employee('Анна', 'Иоановна', 'ж')

print(employee1.first_name, employee1.get_vacation_details())
print(employee1.first_name, 'уехал в отпуск на 7 дней')

employee1.consume_vacation(7)  # Метод, вычитающий отгулянные дни, передаём в скобках количество дней

print(employee1.get_vacation_details())

print(employee2.first_name, employee2.get_vacation_details())
print(employee2.first_name, 'уехала в отпуск на 10 дней')

employee2.consume_vacation(10)  # Метод, вычитающий отгулянные дни, передаём в скобках количество дней

print(employee2.get_vacation_details())

"""# Задание 1

Задание:

Создайте класс с именем Rectangle который имеет:
- Атрибуты ширины и высоты.
- Метод расчета площади.
- Метод расчета периметра.
- Метод отображения размеров прямоугольника.

Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность.
"""

class Rectangle:

    def __init__(self, height, width): # конструктор класса
        self.height = height
        self.width = width

    def area_calculation(self):
        return self.height * self.width

    def perimeter_calculation(self):
        return 2 * (self.height + self.width)

    def display(self):
        print(f'Размеры прямоугольника:\nВысота: {self.height}, ширина: {self.width}.')
        return self.height, self.width

rectangle1 = Rectangle(5, 15)

rectangle1.display()

print(f'Площадь прямоугольника = {rectangle1.area_calculation()}.')
print(f'Периметр прямоугольника = {rectangle1.perimeter_calculation()}.')

"""# Задание 2

Задание: Создайте мини версию банковской системы:


Инструкции:

1. Создайте класс BankAccountсо следующими атрибутами:
    - account_holder -  владелец счета
    - balance - баланс счета

2. Реализуйте следующие методы:
    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.
    - deposit(amount): Добавьте указанную сумму к балансу.
    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.
    - get_balance(): Возврат текущего баланса.


Создайте объект класса и продемонстрируйте его возможности
"""

class BankAccount:

    def __init__(self, account_holder): # конструктор класса
        self.account_holder = account_holder
        self.balance = 0

    def deposit(self, amount):

        if amount > 0:
            self.balance += amount
            print(f'На счёт добавлено: {amount}. Баланс счёта: {self.balance}.')
        else:
            print('Неправильная сумма')

    def withdraw(self, amount):

        if self.balance >= amount:
            self.balance -= amount
            print(f'Со счёта снято: {amount}. Баланс счёта: {self.balance}.')
        elif amount <= 0:
            print('Сумма введена неверно.')
        else:
            print('Недостаточно средств на счету.')

    def get_balance(self):
        return self.balance

account1 = BankAccount('Иван Иванов')

print(f'Владелец счёта: {account1.account_holder} \nБаланс счёта: {account1.get_balance()}')

amount = int(input('Введите сумму, которую вы хотите добавить на счёт: '))
account1.deposit(amount)

amount = int(input('Введите сумму, которую вы хотите списать со счёта: '))
account1.withdraw(amount)

amount = int(input('Введите сумму, превышающую баланс счёта: '))
account1.withdraw(amount)

"""# Задание 3

Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов
"""

import random

# Класс - общий для рыцаря и дракона
class Character:
    def __init__(self, name, health, damage_range):
        self.name = name
        self.health = health
        self.damage_range = damage_range

    def attack(self, defender):
        damage = random.randint(*self.damage_range)
        defender.health -= damage
        print(f"{self.name} атакует и наносит {damage} урона!")

        if defender.health <= 0:
            defender.health = 0
            print(f"{defender.name} побеждён!\n")
        else:
            print(f"У {defender.name} осталось {defender.health} здоровья.\n")

# Класс Рыцарь
class Knight(Character):
    def __init__(self, name):
        self.name = name
        self.armor = "стальные доспехи"
        self.weapon = "меч"
        self.health = 100
        self.damage_range = [40, 70]

        print(f"\nВаш рыцарь: {self.name} создан!")
        print(f"Доспехи: {self.armor}, Оружие: {self.weapon}, Здоровье: {self.health}\n")

    def defend(self, attacker):
        print(f"{self.name} защищается!")

        dragon_damage = random.randint(*attacker.damage_range) // 2
        self.health -= dragon_damage

        print(f"Дракон наносит ослабленный урон: {dragon_damage}. Здоровье рыцаря: {self.health}.\n")

# Класс Дракон
class Dragon(Character):
    def __init__(self):
        self.name = "Дракоша"
        self.health = 300
        self.damage_range = [10, 25]

        print(f"Дракон: {self.name} появился на поле боя!")
        print(f"Здоровье: {self.health}, Урон: {self.damage_range[0]}-{self.damage_range[1]}\n")

# Битва
def battle(knight, dragon):
    print("Битва начинается!")

    while knight.health > 0 and dragon.health > 0:
        print("\n1. Атаковать дракона")
        print("2. Защититься (уменьшает урон вдвое на 1 ход)")
        action = input("Ваш выбор: ")

        dragon_should_attack = True

        if action == "1":
            knight.attack(dragon)
        elif action == "2":
            knight.defend(dragon)
            dragon_should_attack = False
        else:
            print("Неверный выбор, дракон атакует!")

        # Дракон атакует, если рыцарь не защитился
        if dragon.health > 0 and dragon_should_attack:
            dragon.attack(knight)

    # Итоги битвы
    if knight.health > 0:
        print(f"Поздравляем, {knight.name} победил дракона!")
    else:
        print(f"Увы, {knight.name} пал в бою. Дракон победил!")


# Главная функция
def main():
    knight_name = input("Введите имя вашего рыцаря: ")
    knight = Knight(knight_name)
    dragon = Dragon()
    battle(knight, dragon)


# Запуск программы
main()

"""# Дополнительное задание

Задача: Система управления библиотекой

**Цель**
Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.

**Требования**

1. **Определение класса**:
   – Создайте класс с именем «Book» со следующими атрибутами:
     - `title`
     - `автор`
     - `isbn`
     - `is_borrowed` (по умолчанию `False`)

2. **Класс библиотеки**:
   - Создайте класс с именем Library, который управляет коллекцией книг.
   - Класс должен иметь следующие методы:
     - `__init__(self)`: инициализирует пустой список книг.
     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.
     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.
     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.
     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.
     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.

3. **Взаимодействие с пользователем**:
   - Создайте простое текстовое меню, которое позволит пользователям:
     - Добавить книгу
     - Одолжить книгу
     - Вернуть книгу
     - Список доступных книг
     - Выйти из программы
"""



