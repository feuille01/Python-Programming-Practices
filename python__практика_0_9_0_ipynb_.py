# -*- coding: utf-8 -*-
"""Python  "Практика 0.9.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mh5O62x8LsSY2J02PQGKnyxUGzPvGiwZ

ФИО
"""



"""# Дисклеймер

В данной практике вам необходимо применить все ваши знания по темам:

- Функции
- Словари
- Списки
- Множества
- Условные конструкции
- Запросы

и все что было изучено на прошлых практических занятиях

В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно

# Задание 0

Создайте функцию по нахождению уникальных элементов из двух списков



```
a = [1, 2, 3, 4]
b = [3, 4, 5, 6]
```
"""

def unique_elements(a,b):
    unique_a = set(a) - set(b)
    unique_b = set(b) - set(a)

    return list(unique_a.union(unique_b))

a = [1, 2, 3, 4]
b = [3, 4, 5, 6]

print(unique_elements(a,b))

"""# Задание 1

Симулятор виртуального питомца

Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.

Требования:

- Функция для усыновления питомца (имя, тип, возраст).
- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.
- Функция для отображения состояния питомца (голод, радость, энергия).
"""

def adopt_pet(name, pet_type, age):
    return {
        "name":name,
        "type":pet_type,
        "age":age,
        "hunger": 50,
        "happines": 50,
        "energy": 50
    }


def feed_pet(pet):
    if pet["hunger"] < 100:
        pet["hunger"] += 10
        pet["happines"] += 5
        print(f"{pet['name']} поел(а)!")
    else:
        print(f"{pet['name']} не голоден!")
    #check_limits(pet)


def play_with_pet(pet):
    if pet["energy"] > 10:
        pet["happines"] += 10
        pet["energy"] -= 15
        print(f"{pet['name']} поиграл(а) и теперь весел(а)!")
    else:
        print(f"{pet['name']} слишком устал(а), чтобы играть!")
    #check_limits(pet)


def pet_sleep(pet):
    if pet["energy"] < 100:
        pet["energy"] += 20
        pet["hunger"] += 10  #Сон увеличивает голод
        print(f"{pet['name']} поспал(а)!")
    else:
        print(f"{pet['name']} не хочет спать!")


def pet_condition(pet):
    print(f"\nСостояние питомца {pet['name']}:")
    print(f"Тип: {pet['type']}")
    print(f"Возраст: {pet['age']}")
    print(f"Голод: {pet['hunger']}")
    print(f"Радость: {pet['happines']}")
    print(f"Энергия: {pet['energy']}\n")


# my_pet = adopt_pet("Барсик", "Кот", 2)

# pet_condition(my_pet)
# feed_pet(my_pet)
# play_with_pet(my_pet)

def main():
    # Усыновление питомца
    name = input("Введите имя питомца: ")
    pet_type = input("Введите тип питомца: ")
    age = input("Введите возраст питомца: ")
    pet = adopt_pet(name, pet_type, age)

    print(f"Ура! Вы усыновили питомца: {name}, это {pet_type}, возраст: {age} лет")

    while True:
        print("\nВыберите действие:")
        print("1 - Покормить питомца")
        print("2 - Поиграть с питомцем")
        print("3 - Уложить питомца спать")
        print("4 - Проверить состояние питомца")
        print("5 - Выход")

        choice = input("Введите номер действия: ")

        if choice == "1":
            feed_pet(pet)
        elif choice == "2":
            play_with_pet(pet)
        elif choice == "3":
            pet_sleep(pet)
        elif choice == "4":
            pet_condition(pet)
        elif choice == "5":
            print(f"До новых встреч, {pet_type} {name} будет ждать вас!")
            break
        else:
            print("Некорректный ввод, введите номер действия!")

main()

"""# Задание 2

Рыцарь и дракон

Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом

Требования:

- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)
- Управление персонажем и мини сюжет
- Создание дракона (Имя, информация о здоровье и уроне)
- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)
- Реализовать бой между драконом и рыцарем
"""

import random


# Создание рыцаря
def create_character():
    print("Добро пожаловать в игру 'Рыцарь и Дракон'!")

    knight_name = input("Введите имя вашего рыцаря: ")
    knight = {
        "name": knight_name,
        "armor": "cтальные доспехи",
        "weapon": "меч",
        "damage_range": [40, 70],
        "health": 100
    }

    print(f"\nВаш рыцарь: {knight['name']} создан!")
    print(f"Доспехи: {knight['armor']}, Оружие: {knight['weapon']}, Здоровье: {knight['health']}\n")
    return knight


# Создание дракона
def create_dragon():

    dragon = {
        "name": "Дракоша",
        "damage_range": [10, 25],
        "health": 300
    }

    print(f"Дракон: {dragon['name']} появился на поле боя!")
    print(f"Здоровье: {dragon['health']}, Урон: {dragon['damage_range'][0]}-{dragon['damage_range'][1]}\n")
    return dragon


# Атака
def attack(attacker, defender):

    damage = random.randint(*attacker["damage_range"])
    defender["health"] -= damage

    print(f"{attacker['name']} атакует и наносит {damage} урона!")

    if defender["health"] <= 0:
        defender["health"] = 0
        print(f"{defender['name']} побеждён!\n")
    else:
        print(f"У {defender['name']} осталось {defender['health']} здоровья.\n")


# Битва
def battle(knight, dragon):
    print("Битва начинается!")

    while knight["health"] > 0 and dragon["health"] > 0:
        print("\n1. Атаковать дракона")
        print("2. Защититься (уменьшает урон вдвое на 1 ход)")
        action = input("Ваш выбор: ")

        dragon_should_attack = True

        if action == "1":
            attack(knight, dragon)
        elif action == "2":
            print(f"{knight['name']} защищается!")
            dragon_damage = random.randint(*dragon["damage_range"]) // 2
            knight["health"] -= dragon_damage
            print(f"Дракон наносит ослабленный урон: {dragon_damage}. Здоровье рыцаря: {knight['health']}.\n")
            dragon_should_attack = False
        else:
            print("Неверный выбор, дракон атакует!")


        if dragon["health"] > 0 and dragon_should_attack:
            attack(dragon, knight)

    # Итоги битвы
    if knight["health"] > 0:
        print(f"Поздравляем, {knight['name']} победил дракона!")
    else:
        print(f"Увы, {knight['name']} пал в бою. Дракон победил!")


# Главная функция
def main():
    knight = create_character()
    dragon = create_dragon()
    battle(knight, dragon)


main()

"""# Задание 3

Цель - создать менеджера команды Pokémon, который позволит пользователям:

- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)
- Удалять покемонов из их команды.
- Просматривать подробную информацию обо всех покемонах в команде.
- Находить покемона по имени.
- Устраивать тренировочный бой между двумя покемонами

Для данной задачи используйте: https://pokeapi.co/
"""

import requests

# Инициализация команды пользователя
team = []


# Получение данных о покемоне (PokeAPI)
def get_pokemon_info(name):
    url = (f"https://pokeapi.co/api/v2/pokemon/{name.lower()}")
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()

        return {
            "name": data["name"],
            "hp": data["stats"][0]["base_stat"],
            "attack": data["stats"][1]["base_stat"],
            "defense": data["stats"][2]["base_stat"],
            "types": [t["type"]["name"] for t in data["types"]],
        }
    else:
        return None


# Добавление покемона в команду
def add_pokemon_to_team(name):
    if any(p["name"] == name.lower() for p in team):
        print(f"{name} уже есть в команде.")
        return    # Завершить выполнение функции, если покемон найден

    pokemon = get_pokemon_info(name)

    if pokemon:
        team.append(pokemon)
        print(f"{pokemon['name']} добавлен в команду!")
    else:
        print(f"Покемон {name} не найден.")


# Удаление покемона из команды
def remove_pokemon_from_team(name):
    for pokemon in team:
        if pokemon["name"] == name.lower():
            team.remove(pokemon)
            print(f"{name} удален из команды.")
            return

    print(f"{name} не найден в команде.")


# Просмотр всех покемонов в команде
def show_team():
    if not team:
        print("Команда пуста.")
        return

    print("Команда Pokémon:")
    for p in team:
        print(f"Имя: {p['name']}, HP: {p['hp']}, Атака: {p['attack']}, Защита: {p['defense']}, Типы: {', '.join(p['types'])}")


# Поиск покемона по имени
def find_pokemon(name):
    for pokemon in team:
        if pokemon["name"] == name.lower():
            return pokemon
    return None


# Функция для тренировки двух покемонов
def train_battle(pokemon1_name, pokemon2_name):
    # Поиск покемонов в команде
    p1 = find_pokemon(pokemon1_name)
    p2 = find_pokemon(pokemon2_name)

    if not p1:
        print(f"Покемон {pokemon1_name} не найден в команде.")
        return

    if not p2:
        print(f"Покемон {pokemon2_name} не найден в команде.")
        return

    # Тренировочный бой
    print(f"{p1['name']} vs {p2['name']}!")
    if p1["attack"] > p2["defense"]:
        print(f"{p1['name']} выиграл бой!")
    elif p2["attack"] > p1["defense"]:
        print(f"{p2['name']} выиграл бой!")
    else:
        print("Бой закончился ничьёй!")



# Основная программа
def main():
    while True:
        print("\nМенеджер команды Pokémon")
        print("1. Добавить покемона")
        print("2. Удалить покемона")
        print("3. Показать команду")
        print("4. Найти покемона")
        print("5. Устроить тренировочный бой")
        print("6. Выйти")

        choice = input("Выберите действие: ")

        if choice == "1":
            name = input("Введите имя покемона: ")
            add_pokemon_to_team(name)
        elif choice == "2":
            name = input("Введите имя покемона: ")
            remove_pokemon_from_team(name)
        elif choice == "3":
            show_team()
        elif choice == "4":
            name = input("Введите имя покемона: ")
            pokemon = find_pokemon(name)
            if pokemon:
                print(f"Найден покемон: Имя: {pokemon['name']}, HP: {pokemon['hp']}, Атака: {pokemon['attack']}, Защита: {pokemon['defense']}, Типы: {', '.join(pokemon['types'])}")
            else:
                print(f"{name} не найден в команде.")
        elif choice == "5":
            pokemon1_name = input("Введите имя первого покемона: ")
            pokemon2_name = input("Введите имя второго покемона: ")
            train_battle(pokemon1_name, pokemon2_name)
        elif choice == "6":
            print("Выход из программы.")
            break
        else:
            print("Неверный выбор. Попробуйте снова.")


main()