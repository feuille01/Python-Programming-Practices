# -*- coding: utf-8 -*-
"""Python  "Практика 0.6.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WpPsqFtFJhPCn7goG7xXrv5XCDJpo-jW

---

# **Дисклеймер**

В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики

---

# Задание 1

**Задача:**

Напишите функцию очищающий список от дубликтов


*Запрещено:*

*   Использовать set() или готовые функции очищающие список от дубликатов

Вввод:

```
apple banana apple 1 3 4 4 5
```


Вывод:

```
apple banana 1 3 4 5
```
"""

def remove_duplicates(list_):
    result = []

    for i in list_:
        if i not in result:
            result.append(i)
    return result


list_ = (input().split(" "))

print(f"{' '.join(remove_duplicates(list_))}")

"""# Задание 2

**Задача:**

Написать функцию для нахождения простых чисел в диапазоне

Ввод:

```
10, 50
```

Вывод:

```
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47
```
"""

# функция определяющая является ли число простым
def prime_number(num):
    count = 0

    for i in range(1, num+1):
        if num % i == 0:
            count += 1
    if count == 2:
        return 1
    return ' '


def nums(num_list):
    for i in range(num_list[0], num_list[1]+1):
        k = prime_number(i)
        if k != ' ':
            list_.append(i)
    return list_


list_ = []
list_nums = (input().split(","))#  границы диапазона
num_list = list(map(int, list_nums))
nums(num_list)
result = list(map(str, list_))
print(f"{', '.join(result)}")

"""# Задание 3

Напишите функцию для объединения двух списков (список ключей и список значении) в словарь

*Запрещено:*

*   Использования готовых функции для объединения списков (пример: zip() )

Дано:

```
keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
```

Вывод:
```
{'a': 1, 'b': 2, 'c': 3, 'e': 4}
```



"""

def lists_in_dict(keys, values):
    dict_ = { }

    for i in range(len(keys)):
        dict_[keys[i]] = values [i]

    print(dict_)


keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
lists_in_dict(keys, values)

"""# Задание 4

Напишите функцию(ии) для подсчета статистических параметров:
*   Сумму
*   Среднее арифметическое
*   Медиану
*   Моду


*Запрещено:*

*   sum()
*   sorted()
*   и других функции предоставляющих готовое решение задания

Дано:

```
numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

```

Вывод:
```
{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}
```

"""

def counting(numbers):
    sum_ = 0
    mean = 0
    median = 0

    # Подсчёт суммы
    for i in range(list_lenght):
        sum_ += numbers[i]

        # Подсчёт среднего значения
        mean = sum_/len(numbers)

    # Нахождение медианы
    index = len(numbers) // 2

    if len(numbers) % 2 != 0:
        median = numbers[index]   # Нечётная длина
    else:
        index1 = index - 1
        index2 = index
        median = (numbers[index1] + numbers[index2]) / 2  # Чётная длина

    # Нахождение моды (функция find_mode)
    mode = find_mode(numbers)

    return {'mean': mean, 'median': median, 'mode': mode, 'sum': sum_}


def find_mode(numbers):
    frequency = {}

    # Подсчёт кол-ва вхождений
    for number in numbers:
        if number in frequency:
            frequency[number] += 1
        else:
            frequency[number] = 1

    # Поиск макс частоты
    max_count = 0
    mode = 0

    for number, count in frequency.items():
        if count > max_count:
            max_count = count
            mode = number

    return mode


numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]
list_lenght = (len(numbers))
dict_ = (counting(numbers))
print(dict_)

"""# Задание 5

На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.

*Запрещено:*

*   len()

Дано:

```
Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.

```

Вывод:
```
Самое длинное слово с номером 5: обязательны
```
"""

def count_symbols(words):
    count_dict = { }
    for word in words:
        count = 0
        for symbol in word:
            count += 1
        count_dict[word] = count

    return count_dict


def find_max(dict_):
    max_k = 0
    max_v = 0
    for k, v in dict_.items():
        if v > max_v:
            max_k = k
            max_v = v

    return max_k

string = 'Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.'
words = string.split(' ')
dict_ = count_symbols(words)
max_word = find_max(dict_)
index = words.index(max_word)
print(f"Самое длинное слово под номером {index+1}: {max_word}")

"""# Задание 6

Напишите программу, для управления оценками студентов, со следующими функциями:

* Добавление информации о студенте и его оценках.
* Подсчет среднего балла студента.
* Получение списка всех студентов с их средними баллами.
* Поиск студента по имени и вывод его оценок и среднего балла.




"""

# Добавление студента и его оценок в словарь
# Параметры: имя студента (строка), оценки (список целых чисел)
def add_student(name, grades):

    students[name] = grades

    print(f"Студент {name} и его оценки добавлены.")


# Вычисление среднего балла
def calculate_average(grades):

    total = 0
    count = 0

    for grade in grades:
        total += grade
        count += 1
    if count == 0:
        return 0  # если нет оценок, возвращается 0
    return total / count


# Вывод списка студентов и их сред балла
def get_all_students():
    print("Список всех студентов и их средних баллов:")

    for name, grades in students.items():
        average = calculate_average(grades)
        print(f"{name}: Средний балл - {average:.2f}")


# Поиск студента по имени и вывод его оценок и среднего балла
def find_student(name):

    if name in students:
        grades = students[name]
        average = calculate_average(grades)
        print(f"Студент: {name}")
        print(f"Оценки: {grades}")
        print(f"Средний балл: {average:.2f}")
    else:
        print(f"Студент с именем {name} не найден.")


# Основная функция - меню
def main():

    while True:
        print("\nМеню:")
        print("1. Добавить студента и его оценки")
        print("2. Подсчитать средний балл студента")
        print("3. Получить список всех студентов с их средними баллами")
        print("4. Найти студента по имени")
        print("5. Выход")

        choice = input("Выберите действие (1-5): ")

        if choice == "1":
            name = input("Введите имя студента: ")
            grades = input("Введите оценки через запятую: ").split(",")

            # Преобразуем оценки в список целых чисел
            grades = list(map(int, grades))
            # grades = [int(grade.strip()) for grade in grades if grade.strip().isdigit()]
            add_student(name, grades)

        elif choice == "2":
            name = input("Введите имя студента для подсчета среднего балла: ")
            if name in students:
                average = calculate_average(students[name])
                print(f"Средний балл для {name}: {average:.2f}")
            else:
                print(f"Студент с именем {name} не найден.")

        elif choice == "3":
            get_all_students()

        elif choice == "4":
            name = input("Введите имя студента для поиска: ")
            find_student(name)

        elif choice == "5":
            print("Выход из программы.")
            break

        else:
            print("Неверный выбор. Пожалуйста, выберите действие от 1 до 5.")


students = {}

main()

"""# Задание 7


**Задача:**

Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.

Ключевые особенности:

*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос
*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.
*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.
*  Реализуйте функцию добавления нового вопроса
*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса

"""

